// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: profile_hourly_views_stats.sql

package dbs

import (
	"context"
	"time"
)

const profileHourlyViewsStats = `-- name: ProfileHourlyViewsStats :one
SELECT COALESCE(SUM(CASE WHEN time >= $1 THEN count ELSE 0 END), 0)::BIGINT  AS day_count,
       COALESCE(SUM(CASE WHEN time >= $2 THEN count ELSE 0 END), 0)::BIGINT AS week_count,
       COALESCE(SUM(count), 0)::BIGINT                                         AS month_count
FROM profile_hourly_views_stats
WHERE user_id = $3
  AND time >= $4
`

type ProfileHourlyViewsStatsParams struct {
	Day    time.Time
	Week   time.Time
	UserID int64
	Month  time.Time
}

type ProfileHourlyViewsStatsRow struct {
	DayCount   int64
	WeekCount  int64
	MonthCount int64
}

func (q *Queries) ProfileHourlyViewsStats(ctx context.Context, arg ProfileHourlyViewsStatsParams) (ProfileHourlyViewsStatsRow, error) {
	row := q.queryRow(ctx, q.profileHourlyViewsStatsStmt, profileHourlyViewsStats,
		arg.Day,
		arg.Week,
		arg.UserID,
		arg.Month,
	)
	var i ProfileHourlyViewsStatsRow
	err := row.Scan(&i.DayCount, &i.WeekCount, &i.MonthCount)
	return i, err
}

const profileHourlyViewsStatsUpsert = `-- name: ProfileHourlyViewsStatsUpsert :exec
INSERT INTO profile_hourly_views_stats (user_id, time, count)
VALUES ($1, $2, $3)
ON CONFLICT (user_id, time) DO UPDATE
    SET count = profile_hourly_views_stats.count + $3
`

type ProfileHourlyViewsStatsUpsertParams struct {
	UserID int64
	Time   time.Time
	Count  int64
}

func (q *Queries) ProfileHourlyViewsStatsUpsert(ctx context.Context, arg ProfileHourlyViewsStatsUpsertParams) error {
	_, err := q.exec(ctx, q.profileHourlyViewsStatsUpsertStmt, profileHourlyViewsStatsUpsert, arg.UserID, arg.Time, arg.Count)
	return err
}
