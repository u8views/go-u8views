// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: users.sql

package dbs

import (
	"context"
	"time"
)

const usersNew = `-- name: UsersNew :one
INSERT INTO users (social_provider, social_provider_user_id, username, created_at, updated_at, last_login_at)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (social_provider, social_provider_user_id) DO UPDATE
    SET last_login_at = excluded.last_login_at
RETURNING id
`

type UsersNewParams struct {
	SocialProvider       SocialProvider
	SocialProviderUserID string
	Username             string
	CreatedAt            time.Time
	UpdatedAt            time.Time
	LastLoginAt          time.Time
}

func (q *Queries) UsersNew(ctx context.Context, arg UsersNewParams) (int64, error) {
	row := q.queryRow(ctx, q.usersNewStmt, usersNew,
		arg.SocialProvider,
		arg.SocialProviderUserID,
		arg.Username,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.LastLoginAt,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const usersUpdateUsername = `-- name: UsersUpdateUsername :exec
UPDATE users
SET username   = $1,
    updated_at = $2
WHERE id = $3
  AND username <> $1
`

type UsersUpdateUsernameParams struct {
	Username  string
	UpdatedAt time.Time
	ID        int64
}

func (q *Queries) UsersUpdateUsername(ctx context.Context, arg UsersUpdateUsernameParams) error {
	_, err := q.exec(ctx, q.usersUpdateUsernameStmt, usersUpdateUsername, arg.Username, arg.UpdatedAt, arg.ID)
	return err
}
