// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: username_history.sql

package dbs

import (
	"context"
	"time"
)

const usernameHistoryGetByOldUsername = `-- name: UsernameHistoryGetByOldUsername :one
SELECT u.username
FROM username_history uh
         INNER JOIN users u ON uh.user_id = u.id
WHERE uh.canonical_username = LOWER($1)
  AND uh.social_provider = $2
ORDER BY uh.updated_at DESC
LIMIT 1
`

type UsernameHistoryGetByOldUsernameParams struct {
	Username       string
	SocialProvider SocialProvider
}

func (q *Queries) UsernameHistoryGetByOldUsername(ctx context.Context, arg UsernameHistoryGetByOldUsernameParams) (string, error) {
	row := q.queryRow(ctx, q.usernameHistoryGetByOldUsernameStmt, usernameHistoryGetByOldUsername, arg.Username, arg.SocialProvider)
	var username string
	err := row.Scan(&username)
	return username, err
}

const usernameHistoryNew = `-- name: UsernameHistoryNew :exec
INSERT INTO username_history (user_id, social_provider, canonical_username, created_at, updated_at)
VALUES ($1, $2, LOWER($3), $4, $5)
ON CONFLICT (canonical_username, social_provider, user_id) DO UPDATE
    SET updated_at = excluded.updated_at
`

type UsernameHistoryNewParams struct {
	UserID         int64
	SocialProvider SocialProvider
	Username       string
	CreatedAt      time.Time
	UpdatedAt      time.Time
}

func (q *Queries) UsernameHistoryNew(ctx context.Context, arg UsernameHistoryNewParams) error {
	_, err := q.exec(ctx, q.usernameHistoryNewStmt, usernameHistoryNew,
		arg.UserID,
		arg.SocialProvider,
		arg.Username,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
